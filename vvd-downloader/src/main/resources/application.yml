# application setting

io: # input, output, and error output dir, can be relative path from the terminal current directory
  input-directory:
  output-directory:
  error-directory:

config: # configuration
  preference:
    # your order of which PV service is preferred if available
    # a Vocaloid song can have multiple PVs available across different PV serivces (e.g. niconico, youtube, etc)
    # when downloading PVs for a Vocaloid song, the downloader will try to find the first pv service that contains a PV for this song
    # the downloader will use this list as an order of which pv service to check first
    # you can also disable song PV services by not listing them
    # values here are comma separated, name must be same as the pv service string in VocaDB pv json, see VocaDB APIs documentation
    # currently we only support NicoNicoDouga, Youtube and Bilibili
    # recommend setting is putting all current supported PV services but just reorder them to your favourite PV services.
    pv-preference: NicoNicoDouga, Youtube, Bilibili
    # maximum retry before call it a failure, this does not include the first try
    max-retry-count: 2
    # if the original PV is unavailable, should we try reprinted PV?
    try-reprinted-pv: true #to improve: can let users decided on pv type, similar to how pv-preference works, make sure add similar validation as pv-preference too
    # if PVs from one PV service, either original or reprinted, failed to be download,
    # should we move to next available PV service listed in the pv-preference, default value is false
    # currently it is false as default because we don't want to switch to next PV service due to our codebase bug
    # while the pv is actually available or the downloader is working properly
    try-next-pv-service-on-fail: false
    # if try-reprinted-pv is true, should we only try reprinted PV after all original PVs across all pv services are failed?
    # if this setting is true, the downloader will go over the pv-preference list twice.
    # where in the first round, only original pvs are tried. then in second round, all reprinted pvs are tried
    # setting this to false will make the download go over the pv-preference list only once.
    try-all-original-pvs-before-reprinted-pvs: true

  # which PV service uses which downloader(s), separated by comma
  # downloader names must be same as names in downloader setting
  # when new PV service is added, change it on DownloaderBaseConfig
  enablement:
    NicoNicoDouga:  # enable downloaders from NicoNicoDouga's available downloaders. e.g. nndownload
    Youtube:
    Bilibili:


  downloader:
    NicoNicoDouga:
      # settings of youtube-dl/ytp-dl for downloading niconico videos
      # settings must make sure nothing blocks from downloading the video (e.g. don't put --version on yt-dlp)
      # do the same for all other downloaders.
      youtube-dl:
        launch-cmd:
        external-args:

      nndownload:
        launch-cmd:
        external-args:

    Youtube:
      youtube-dl:
        launch-cmd:
        external-args:

    Bilibili:
      youtube-dl:
        launch-cmd:
        external-args:

  environment:
    # path of the mediainfo cli tool
    # be aware that we need the executable MediaInfo.exe file, not the .dll file
    # or if the cli tool is already in your PATH, you can leave this as "mediainfo"
    # for debian based distros, you can install mediainfo using "sudo apt-get install mediainfo"
    mediainfo-launch-cmd:
  download:
    timeout: 10
    unit: minutes








# spring setting, DON't touch. unless you know what you are doing

spring:
  jackson:
    deserialization:
      fail-on-unknown-properties: true
    serialization:
      indent-output: true
    # default-property-inclusion: non_null # disabling for now, we want 3rd app read our json easily
  config:
    import: optional:file:./my-downloader-config.yml

logging:
  level:
    mikufan: info